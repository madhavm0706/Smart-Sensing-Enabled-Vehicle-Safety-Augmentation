{"version":3,"file":"xydata.iife.js","sources":["../node_modules/tslib/tslib.es6.js","../src/stream.ts","../src/dataHost.ts","../src/dataGenerator.ts","../src/generators/progressiveRandom.ts","../src/generators/progressiveTrace.ts","../src/generators/progressiveFunction.ts","../src/generators/trace.ts","../src/generators/OHLC.ts","../src/generators/deltaFunction.ts","../src/generators/whiteNoise.ts","../src/generators/sampledData.ts","../src/generators/parametricFunction.ts","../src/generators/spectrumData.ts","../src/generators/waterDrop.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export type StreamContinueHandler = () => boolean\r\n\r\n/**\r\n * Configuration object for the stream\r\n */\r\nexport interface StreamOptions {\r\n    /**\r\n     * How often the stream processes the data it has\r\n     */\r\n    interval: number,\r\n    /**\r\n     * How many elements of data is processed at same time\r\n     */\r\n    batchSize: number,\r\n    /**\r\n     * Set to true to repeat the stream infinitely.\r\n     * Set to false to only continue until the stream has no data.\r\n     * Set to a number to get n batches of the data.\r\n     * Set to call back function to continue the stream until the callback returns false.\r\n     * Leaving the value as undefined repeats the stream infinitely.\r\n     */\r\n    repeat: boolean | number | StreamContinueHandler\r\n}\r\n\r\n/**\r\n * Data stream.\r\n * @param T The type of the streamed data.\r\n */\r\nexport class Stream<T> {\r\n    /**\r\n     * State of the stream.\r\n     */\r\n    private streamActive = false\r\n    /**\r\n     * The output stream to use on stream functions that have output.\r\n     */\r\n    private outputStream?: Stream<T>\r\n    /**\r\n     * The external handler for mapping the stream.\r\n     */\r\n    private mapHandler?: ( value: T, index: number, array: T[] ) => T\r\n    /**\r\n     * The external handler for forEach.\r\n     */\r\n    private forEachHandler?: ( value: T, index: number, array: T[] ) => void\r\n    /**\r\n     * The active internal handler. Called when the stream is active and it has data to process.\r\n     */\r\n    private streamHandler?: ( data: T[] ) => void\r\n    /**\r\n     * The data that the stream holds currently\r\n     */\r\n    private data: T[] = []\r\n    /**\r\n     * The interval for the stream to process data.\r\n     */\r\n    private readonly interval = this.options.interval || 1000\r\n    /**\r\n     * How many elements from the data to process at one time.\r\n     */\r\n    private readonly batchSize = this.options.batchSize || 1\r\n    /**\r\n     * An function to use to reset the data when it is moved to the end of the stream.\r\n     * Only used if the stream is infinite.\r\n     */\r\n    private infiniteReset: ( value: T ) => T\r\n\r\n    /**\r\n     * How many batches of data to stream.\r\n     * -1 = infinite stream\r\n     * -2 = until the end of data\r\n     */\r\n    private batchesLeft: number = -2\r\n    /**\r\n     * Handler used to check whether or not the stream should continue.\r\n     */\r\n    private continueHandler?: StreamContinueHandler\r\n\r\n    /**\r\n     * Create a new instance of a stream.\r\n     * @param options The options to use to construct this stream.\r\n     * @param infiniteReset A function to use when offsetting the data during moving it to back of the data stream\r\n     */\r\n    constructor( private readonly options: StreamOptions, infiniteReset: ( value: T ) => T ) {\r\n        this.runStream = this.runStream.bind( this )\r\n        this.infiniteReset = infiniteReset\r\n        if ( options.repeat !== undefined ) {\r\n            if ( typeof options.repeat === 'boolean' ) {\r\n                this.batchesLeft = options.repeat ? -1 : -2\r\n            } else if ( typeof options.repeat === 'number' ) {\r\n                this.batchesLeft = options.repeat + 1\r\n            } else if ( typeof options.repeat === 'function' ) {\r\n                this.continueHandler = options.repeat\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Consumes the stream.\r\n     * Moves the elements to the end of the stream if the stream should be infinite.\r\n     * @returns The elements that were consumed from the stream.\r\n     */\r\n    private consume(): T[] {\r\n        let cutCount = this.batchSize\r\n        if ( this.data.length < this.batchSize ) {\r\n            cutCount = this.data.length\r\n        }\r\n        const consumed = this.data.splice( 0, cutCount )\r\n        if ( ( this.batchesLeft > 0 || this.batchesLeft === -1 ) && consumed.length > 0 ) {\r\n            this.data = this.data.concat( consumed.map( dataPoint => this.infiniteReset( dataPoint ) ) );\r\n            // If the data wasn't enough to fill the batch size, take the first element of the data and add it to\r\n            // the batch and then move it to the end of the data\r\n            if ( consumed.length < this.batchSize ) {\r\n                while ( consumed.length < this.batchSize ) {\r\n                    const nextPoint = this.data.splice( 0, 1 )[0];\r\n                    this.data = this.data.concat( this.infiniteReset( nextPoint ) )\r\n                    consumed.push( nextPoint );\r\n                }\r\n            }\r\n        }\r\n        return consumed\r\n    }\r\n\r\n    /**\r\n     * Check whether the stream should be continued or not.\r\n     */\r\n    private checkStreamContinue() {\r\n        let continueStream = ( this.batchesLeft > 0 ||\r\n            this.batchesLeft === -1 ||\r\n            ( this.batchesLeft === -2 && this.data.length > 0 ) )\r\n            ? true : false\r\n        if ( this.continueHandler ) {\r\n            continueStream = this.continueHandler() === true\r\n        }\r\n        return continueStream\r\n    }\r\n\r\n    /**\r\n     * Handles consuming the data with correct handler. The stream will be active until it has no more data or\r\n     * the streams repeat count hits 0 or the continue callback returns false.\r\n     */\r\n    private runStream() {\r\n        const continueStream = this.checkStreamContinue()\r\n        if ( this.data && this.data.length > 0 && continueStream ) {\r\n            if ( this.streamHandler ) {\r\n                const curData = this.consume()\r\n                this.streamHandler( curData )\r\n            }\r\n            setTimeout( this.runStream, this.interval )\r\n        } else {\r\n            this.streamActive = false\r\n        }\r\n        if ( this.batchesLeft > 0 ) this.batchesLeft--\r\n    }\r\n\r\n    /**\r\n     * Activates the stream if it has gone stale.\r\n     */\r\n    private activateStream() {\r\n        if ( !this.streamActive ) {\r\n            this.streamActive = true\r\n            this.runStream()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Push new data to the end of stream.\r\n     * @param newData New data point\r\n     */\r\n    push( newData: T | T[] ) {\r\n        if ( Array.isArray( newData ) ) {\r\n            this.data = this.data.concat( newData )\r\n        } else {\r\n            this.data.push( newData )\r\n        }\r\n        this.activateStream()\r\n    }\r\n\r\n    /**\r\n     * Maps the stream of data.\r\n     * @param handler A function that works just like a normal JavaScript Array.prototype.map handler.\r\n     * @returns A new stream with the data mapped by the handler.\r\n     */\r\n    map( handler: ( value: T, index: number, array: T[] ) => T ) {\r\n        this.outputStream = new Stream<T>( { ...this.options, repeat: false }, this.infiniteReset )\r\n        this.mapHandler = handler\r\n        this.streamHandler = this._map\r\n        this.activateStream()\r\n        return this.outputStream\r\n    }\r\n\r\n    /**\r\n     * The internal implementation of the map.\r\n     * Calls the set mapHandler on the data set.\r\n     * Pushes the returned data to the output stream.\r\n     * @param data Data to map\r\n     */\r\n    private _map( data: T[] ) {\r\n        if ( this.mapHandler && this.outputStream ) {\r\n            const mapped = data.map( this.mapHandler )\r\n            this.outputStream.push( mapped )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls the handler for each element of the stream.\r\n     * @param handler A function that works just like a normal JavaScript Array.prototype.forEach handler.\r\n     */\r\n    forEach( handler: ( value: T, index: number, array: T[] ) => void ) {\r\n        this.forEachHandler = handler\r\n        this.streamHandler = this._forEach\r\n        this.activateStream()\r\n    }\r\n\r\n    /**\r\n     * The internal implementation of the forEach function.\r\n     * Calls the forEachHandler on all elements of the data set.\r\n     * @param data Data to call forEach on.\r\n     */\r\n    private _forEach( data: T[] ) {\r\n        if ( this.forEachHandler )\r\n            data.forEach( this.forEachHandler )\r\n    }\r\n}\r\n","import { Stream, StreamOptions, StreamContinueHandler } from './stream'\r\n\r\n/**\r\n * Represents a xy point\r\n */\r\nexport interface Point {\r\n    /**\r\n     * X Coordinate\r\n     */\r\n    x: number,\r\n    /**\r\n     * Y Coordinate\r\n     */\r\n    y: number\r\n}\r\n/**\r\n * OHLC data\r\n * timestamp, open, high, low, close\r\n */\r\nexport type OHLCData = [number, number, number, number, number]\r\n\r\n/**\r\n * A base class for a data host that is capable to store the data and provide it as\r\n * a stream or a promise.\r\n * @param T Data type of the hosted data\r\n */\r\nexport class DataHost<T> {\r\n    private data: T[] = []\r\n    private derivativeDataHosts: DataHost<T>[] = []\r\n    protected frozenData?: T[]\r\n    private promisesToResolve: ( ( value?: T[] | PromiseLike<T[]> | undefined ) => void )[] = []\r\n    private streamsToPush: Stream<T>[] = []\r\n    private readonly infiniteResetHandler: ( dataToReset: T, data: T[] ) => T\r\n    private streamOptions: Readonly<StreamOptions>\r\n\r\n    constructor( infiniteResetHandler: ( dataToReset: T, data: T[] ) => T, streamOptions: StreamOptions ) {\r\n        this.infiniteReset = this.infiniteReset.bind( this )\r\n        this.infiniteResetHandler = infiniteResetHandler\r\n        const opts = {\r\n            interval: streamOptions.interval,\r\n            batchSize: streamOptions.batchSize,\r\n            repeat: streamOptions.repeat !== undefined ? streamOptions.repeat : false\r\n        }\r\n        this.streamOptions = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new stream of the data that the host stores.\r\n     * Consecutive calls always return a new instance of same data.\r\n     */\r\n    toStream(): Stream<T> {\r\n        const stream = new Stream<T>( this.streamOptions, this.infiniteReset )\r\n        if ( this.frozenData ) {\r\n            stream.push( this.frozenData )\r\n        } else {\r\n            this.streamsToPush.push( stream )\r\n        }\r\n        return stream\r\n    }\r\n\r\n    /**\r\n     * Returns the data as a promise.\r\n     * Consecutive calls always return a new instance of same data.\r\n     */\r\n    toPromise(): Promise<T[]> {\r\n        let pr\r\n        if ( this.frozenData ) {\r\n            pr = Promise.resolve( this.frozenData )\r\n        } else {\r\n            pr = new Promise<T[]>( resolve => { this.promisesToResolve.push( resolve ) } )\r\n        }\r\n        return pr\r\n    }\r\n\r\n    /**\r\n     * Handles resetting the data when used as infinite stream of data.\r\n     * Used to recalculate the point when it is moved to end of stream.\r\n     * @param data Data to reset\r\n     */\r\n    private infiniteReset( data: T ): T {\r\n        return this.infiniteResetHandler( data, this.frozenData ? this.frozenData : [] )\r\n    }\r\n\r\n    /**\r\n     * Push data to to the data host. Data is only accepted while the data host is not frozen.\r\n     * @param data Data to add to the data host.\r\n     */\r\n    push( data: T[] | T ) {\r\n        if ( !this.frozenData ) {\r\n            if ( Array.isArray( data ) ) {\r\n                for ( const d of data ) {\r\n                    this.data.push( d )\r\n                }\r\n            } else {\r\n                this.data.push( data as T )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the data to use as data source. Discards old data.\r\n     * @param newData New data to use.\r\n     */\r\n    setData( newData: T[] ) {\r\n        this.data = newData\r\n    }\r\n\r\n    /**\r\n     * Freeze the data host data.\r\n     * After freezing the data the data can be accessed by toStream and toPromise.\r\n     */\r\n    freeze() {\r\n        if ( !this.frozenData ) {\r\n            this.frozenData = this.data\r\n            setTimeout( () => {\r\n                this.promisesToResolve.forEach( p => p( this.frozenData ) )\r\n                this.promisesToResolve = []\r\n            }, 0 )\r\n            setTimeout( () => {\r\n                this.streamsToPush.forEach( s => s.push( this.frozenData || [] ) )\r\n                this.streamsToPush = []\r\n            }, 0 )\r\n            setTimeout( () => {\r\n                this.handleDerivativeDataHosts()\r\n            }, 0 )\r\n            this.data = []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return how many points of data this data host has.\r\n     */\r\n    getPointCount() {\r\n        return this.frozenData ? this.frozenData.length : 0\r\n    }\r\n\r\n    /**\r\n     * Handle DataHosts that have been created based of this data host.\r\n     * Those data hosts should get same data as the base data host.\r\n     */\r\n    private handleDerivativeDataHosts() {\r\n        if ( this.frozenData && this.derivativeDataHosts.length > 0 ) {\r\n            this.derivativeDataHosts.forEach( host => {\r\n                if ( this.frozenData ) {\r\n                    host.setData( this.frozenData )\r\n                }\r\n                host.freeze()\r\n            } )\r\n            this.derivativeDataHosts = []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new data host with the new interval and same data that the original host had.\r\n     * @param interval New interval delay for the stream\r\n     */\r\n    setStreamInterval( interval: number ) {\r\n        const dataHost = new DataHost<T>( this.infiniteResetHandler, { ...this.streamOptions, interval } )\r\n        this.derivativeDataHosts.push( dataHost )\r\n        this.handleDerivativeDataHosts()\r\n        return dataHost\r\n    }\r\n\r\n    /**\r\n     * Returns a new data host with the new batch size and same data that the original host had.\r\n     * @param batchSize New batch size for the stream\r\n     */\r\n    setStreamBatchSize( batchSize: number ) {\r\n        const dataHost = new DataHost<T>( this.infiniteResetHandler, { ...this.streamOptions, batchSize } )\r\n        this.derivativeDataHosts.push( dataHost )\r\n        this.handleDerivativeDataHosts()\r\n        return dataHost\r\n    }\r\n\r\n    /**\r\n     * Returns a new data host with the new repeat and same data that the original host had.\r\n     * @param repeat New repeat for the stream\r\n     */\r\n    setStreamRepeat( repeat: boolean | number | StreamContinueHandler ) {\r\n        const dataHost = new DataHost<T>( this.infiniteResetHandler, { ...this.streamOptions, repeat } )\r\n        this.derivativeDataHosts.push( dataHost )\r\n        this.handleDerivativeDataHosts()\r\n        return dataHost\r\n    }\r\n}\r\n","import { DataHost } from './dataHost'\r\n\r\n/**\r\n * Feature detected performance.now function\r\n * @hidden\r\n */\r\nlet perfNow: () => number\r\n\r\n// feature detect window.performance.now with checks at all levels.\r\nif ( typeof window !== 'undefined' && window.performance && window.performance.now ) {\r\n    perfNow = window.performance.now.bind( window.performance )\r\n} else {\r\n    // window.performance.now doesn't exist, try to load Node JS version\r\n    try {\r\n        if ( typeof require !== 'undefined' ) {\r\n            perfNow = require( 'perf_hooks' ).performance.now\r\n        } else {\r\n            // require failed, throw an error\r\n            throw new Error()\r\n        }\r\n    } catch ( e ) {\r\n        throw new Error( 'Failed to detect \"performance.now\" API' )\r\n    }\r\n}\r\n\r\n/**\r\n * Abstract base class for all data generators.\r\n * Defines a generate function that is used to create new instances of data host.\r\n * @param T Generator data type\r\n * @param K Generator options type\r\n */\r\nexport abstract class DataGenerator<T, K> {\r\n    /**\r\n     * Generator options\r\n     */\r\n    protected options: Readonly<K>\r\n\r\n    constructor( args: K ) {\r\n        this.options = args\r\n    }\r\n\r\n    /**\r\n     * Generate new instance of DataHost with unique data.\r\n     * Data is added to the DataHost asynchronously.\r\n     * @returns A new DataHost.\r\n     */\r\n    generate(): DataHost<T> {\r\n        const dataHost = new DataHost<T>( this.infiniteReset, {\r\n            interval: 500,\r\n            batchSize: 10,\r\n            repeat: false\r\n        } )\r\n        const points = this.getPointCount()\r\n        const nextChunk = this.generateChunks.bind( this, 0, points, dataHost )\r\n        setTimeout( nextChunk, 0 )\r\n        return dataHost\r\n    }\r\n\r\n    /**\r\n     * Generate the random data in chunks that can take x ms per chunk.\r\n     * @param baseIndex The current index for the generator.\r\n     * @param total How many data points to generate.\r\n     * @param dataHost The data host to push the data to.\r\n     */\r\n    private generateChunks( baseIndex: number, total: number, dataHost: DataHost<T> ) {\r\n        const startTime = perfNow()\r\n        const points = []\r\n        // Generate data until elapsed time is more than 15 ms or we have generated enough data.\r\n        for ( let i = 0; perfNow() - startTime < 15 && baseIndex < total; i++ ) {\r\n            const point = this.generateDataPoint( baseIndex )\r\n            baseIndex++;\r\n            points.push( point )\r\n        }\r\n        dataHost.push( points )\r\n        if ( baseIndex < total ) {\r\n            const nextChunk = this.generateChunks.bind( this, baseIndex, total, dataHost )\r\n            setTimeout( nextChunk, 0 )\r\n        } else {\r\n            dataHost.freeze()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Abstract function to return how many points the generator should generate.\r\n     * @returns The number of points the generator should generate.\r\n     */\r\n    protected abstract getPointCount(): number\r\n\r\n    /**\r\n     * Abstract function for all generators to override.\r\n     * Used to create the random data for the data host.\r\n     * @param index Index of the point to generate.\r\n     * @returns A single data point.\r\n     */\r\n    protected abstract generateDataPoint( index: number ): T\r\n\r\n    /**\r\n     * Handles resetting the data when used as infinite stream of data.\r\n     * Used to recalculate the point when it is moved to end of stream.\r\n     * @param dataToReset Data to reset\r\n     * @param data All of the data\r\n     * @returns New data point that should have the contained values adjusted for moving to end of the stream.\r\n     */\r\n    protected abstract infiniteReset( dataToReset: T, data: ReadonlyArray<T> ): T\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\n/**\r\n * Options for the Progressive random data generator.\r\n */\r\nexport interface ProgressiveRandomOptions {\r\n    /**\r\n     * How many points of data to generate.\r\n     */\r\n    numberOfPoints: number\r\n    /**\r\n     * How often to change the offset.\r\n     */\r\n    offsetStep: number,\r\n    /**\r\n     * Maximum change of the offset during one step.\r\n     * Values higher than max are forced to max.\r\n     */\r\n    offsetDeltaMax: number,\r\n    /**\r\n     * Minimum change of the offset during one step.\r\n     * Values lower than min are forec to min.\r\n     */\r\n    offsetDeltaMin: number,\r\n    /**\r\n     * Maximum value for the random data before addding the offset.\r\n     * Values higher than max are forced to max.\r\n     */\r\n    dataMax: number\r\n}\r\n\r\n/**\r\n * Create a new Progressive Random Generator with default values.\r\n * The generator creates random data on Y-axis with progressive X-axis.\r\n */\r\nexport function createProgressiveRandomGenerator() {\r\n    return new ProgressiveRandomGenerator( {\r\n        numberOfPoints: 1000,\r\n        offsetStep: 10,\r\n        offsetDeltaMax: 0.3,\r\n        offsetDeltaMin: 0.1,\r\n        dataMax: 0.5\r\n    } )\r\n}\r\n\r\n/**\r\n * Progressive random data generator.\r\n * Generates random points with progressive X axis.\r\n * The data is offset by an random amount. The data is random between the offset delta min and min + data max.\r\n * Generated data is between 0 and 1.\r\n *\r\n * To create a new instance of Progressive random data generator use [[createProgressiveRandomGenerator]] factory.\r\n */\r\nclass ProgressiveRandomGenerator extends DataGenerator<Point, ProgressiveRandomOptions> {\r\n    constructor( args: ProgressiveRandomOptions ) {\r\n        super( args )\r\n\r\n        // Setup defaults and make sure args are valid\r\n        const opts = {\r\n            numberOfPoints: args.numberOfPoints,\r\n            offsetStep: args.offsetStep === 0 ? 0 : args.offsetStep,\r\n            offsetDeltaMax: Math.min( args.offsetDeltaMax, 1 ),\r\n            offsetDeltaMin: Math.max( args.offsetDeltaMin === 0 ? 0 : args.offsetDeltaMin, 0 ),\r\n            dataMax: Math.min( args.dataMax, 1 )\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfPoints.\r\n     * @param numberOfPoints How many points of data to generate\r\n     */\r\n    setNumberOfPoints( numberOfPoints: number ) {\r\n        return new ProgressiveRandomGenerator( { ...this.options, numberOfPoints } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new offsetStep.\r\n     * @param offsetStep How often to change the offset\r\n     */\r\n    setOffsetStep( offsetStep: number ) {\r\n        return new ProgressiveRandomGenerator( { ...this.options, offsetStep } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new offsetDeltaMax.\r\n     * @param offsetDeltaMax Maximum change of offset during one step.\r\n     */\r\n    setOffsetDeltaMax( offsetDeltaMax: number ) {\r\n        return new ProgressiveRandomGenerator( { ...this.options, offsetDeltaMax } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new offsetDeltaMin.\r\n     * @param offsetDeltaMin Minimum change of offset during one step.\r\n     */\r\n    setOffsetDeltaMin( offsetDeltaMin: number ) {\r\n        return new ProgressiveRandomGenerator( { ...this.options, offsetDeltaMin } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new dataMax.\r\n     * @param dataMax Maximum value for the random data before addding the offset.\r\n     */\r\n    setDataMax( dataMax: number ) {\r\n        return new ProgressiveRandomGenerator( { ...this.options, dataMax } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfPoints\r\n    }\r\n\r\n    private offset: number = 0.5\r\n    /**\r\n     * Generate a new Progressive random data point.\r\n     * @param i Index of point.\r\n     */\r\n    protected generateDataPoint( i: number ) {\r\n        if ( i % this.options.offsetStep === 0 || i === 0 ) {\r\n            const newOffset = Math.random() * ( this.options.offsetDeltaMax - this.options.offsetDeltaMin ) + this.options.offsetDeltaMin\r\n            this.offset = Math.random() > 0.5 ? this.offset + newOffset : this.offset - newOffset\r\n        }\r\n        // Limit the offset so that data is newer lower than 0 or higher than 1\r\n        if ( this.offset + this.options.dataMax > 1 ) {\r\n            this.offset = 1 - this.options.dataMax\r\n        } else if ( this.offset < 0 ) {\r\n            this.offset = 0\r\n        }\r\n\r\n        return {\r\n            x: i,\r\n            y: this.offset + Math.random() * this.options.dataMax\r\n        }\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x + data.length, y: dataToReset.y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\n/**\r\n * Options for progressive trace generator.\r\n */\r\nexport interface ProgressiveTraceGeneratorOptions {\r\n    /**\r\n     * How many points of data to generate.\r\n     */\r\n    numberOfPoints: number\r\n}\r\n\r\n/**\r\n * Create a new Progressive Trace generator with default values.\r\n * The generator creates random data with progressive X axis and random Y axis.\r\n */\r\nexport function createProgressiveTraceGenerator() {\r\n    return new ProgressiveTraceGenerator( {\r\n        numberOfPoints: 1000\r\n    } )\r\n}\r\n\r\n/**\r\n * A progressive trace data generator.\r\n * Generates point data that has progressive X axis. The data is always derived from the previous point.\r\n *\r\n * To create a new instance of progressive trace data generator use [[createProgressiveTraceGenerator]] factory.\r\n */\r\nclass ProgressiveTraceGenerator extends DataGenerator<Point, ProgressiveTraceGeneratorOptions> {\r\n    constructor( args: ProgressiveTraceGeneratorOptions ) {\r\n        super( args )\r\n        const opts = {\r\n            numberOfPoints: args.numberOfPoints\r\n        }\r\n\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfPoints.\r\n     * @param numberOfPoints How many points of data to generate\r\n     */\r\n    setNumberOfPoints( numberOfPoints: number ) {\r\n        return new ProgressiveTraceGenerator( { ...this.options, numberOfPoints } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfPoints\r\n    }\r\n\r\n    private previousPoint = { x: 0, y: 0 }\r\n    protected generateDataPoint( i: number ) {\r\n        const point = {\r\n            x: i,\r\n            y: this.previousPoint.y + ( Math.random() - 0.5 ) * 2\r\n        }\r\n        this.previousPoint = point\r\n        return point\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x + data.length, y: dataToReset.y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\n/**\r\n * Options for progressive function generator.\r\n */\r\nexport interface ProgressiveFunctionOptions {\r\n    /**\r\n     * A function that is sampled to generate the data.\r\n     */\r\n    samplingFunction: ( x: number ) => number,\r\n    /**\r\n     * Start X-value.\r\n     */\r\n    start: number,\r\n    /**\r\n     * End X-value.\r\n     */\r\n    end: number,\r\n    /**\r\n     * X-step between each continuous sample.\r\n     */\r\n    step: number\r\n}\r\n/**\r\n * Create a new Progressive Function generator with default values.\r\n * The generator samples a given function x times between given X range.\r\n */\r\nexport function createProgressiveFunctionGenerator() {\r\n    return new ProgressiveFunctionGenerator( {\r\n        samplingFunction: ( x ) => x * x,\r\n        start: 0,\r\n        end: 100,\r\n        step: 1\r\n    } )\r\n}\r\n/**\r\n * A progressive function data generator.\r\n * Generates point data that has progressive X axis and the value for Y axis is created from the user given function.\r\n *\r\n * To create a new instance of progressive function data generator use [[createProgressiveFunctionGenerator]] factory.\r\n */\r\nclass ProgressiveFunctionGenerator extends DataGenerator<Point, ProgressiveFunctionOptions> {\r\n    private x = this.options.start\r\n    /**\r\n     * Number of points that generator is able to generate.\r\n     * Computed from start, end and step values.\r\n     */\r\n    private readonly numberOfPoints: number\r\n\r\n    constructor( args: ProgressiveFunctionOptions ) {\r\n        super( args )\r\n\r\n        const opts = {\r\n            samplingFunction: args.samplingFunction,\r\n            start: args.start,\r\n            end: args.end,\r\n            step: args.step\r\n        }\r\n        this.options = Object.freeze( opts )\r\n        this.numberOfPoints = Math.ceil( Math.abs( opts.end - opts.start ) / opts.step )\r\n    }\r\n    /**\r\n     * Returns a new Progressive function generator with the new sampling function.\r\n     * @param handler A function that is sampled to generate the data.\r\n     */\r\n    setSamplingFunction( handler: ( x: number ) => number ) {\r\n        return new ProgressiveFunctionGenerator( { ...this.options, samplingFunction: handler } )\r\n    }\r\n    /**\r\n     * Returns a new Progressive function generator with the new start X-value.\r\n     * @param   start   Start X-value\r\n     */\r\n    setStart( start: number ) {\r\n        return new ProgressiveFunctionGenerator( { ...this.options, start } )\r\n    }\r\n    /**\r\n     * Returns a new Progressive function generator with the new end X-value.\r\n     * @param   end   End X-value\r\n     */\r\n    setEnd( end: number ) {\r\n        return new ProgressiveFunctionGenerator( { ...this.options, end } )\r\n    }\r\n    /**\r\n     * Returns a new Progressive function generator with the new X-step.\r\n     * @param   step   X-step between each continuous sample.\r\n     */\r\n    setStep( step: number ) {\r\n        return new ProgressiveFunctionGenerator( { ...this.options, step } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.numberOfPoints\r\n    }\r\n\r\n    protected generateDataPoint() {\r\n        const point = {\r\n            x: this.x,\r\n            y: this.options.samplingFunction( this.x )\r\n        }\r\n        this.x = this.x + this.options.step\r\n        return point\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x + data.length * ( data[data.length - 1].x - data[data.length - 2].x ), y: dataToReset.y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\n/**\r\n * Options for trace generator.\r\n */\r\nexport interface TraceGeneratorOptions {\r\n    /**\r\n     * How many points of data to generate.\r\n     */\r\n    numberOfPoints: number\r\n}\r\n\r\n/**\r\n * Create a new Trace generator with default values.\r\n * The generator creates random XY data where each point is based on previous point.\r\n */\r\nexport function createTraceGenerator() {\r\n    return new TraceGenerator( {\r\n        numberOfPoints: 1000\r\n    } )\r\n}\r\n\r\n/**\r\n * A trace data generator.\r\n * Generates random points that can go to any direction from the previous point.\r\n *\r\n * To create a new instance of trace data generator use [[createTraceGenerator]] factory.\r\n */\r\nclass TraceGenerator extends DataGenerator<Point, TraceGeneratorOptions> {\r\n    constructor( args: TraceGeneratorOptions ) {\r\n        super( args )\r\n        const opts = {\r\n            numberOfPoints: args.numberOfPoints\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfPoints.\r\n     * @param numberOfPoints How many points of data to generate\r\n     */\r\n    setNumberOfPoints( numberOfPoints: number ) {\r\n        return new TraceGenerator( { ...this.options, numberOfPoints } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfPoints\r\n    }\r\n\r\n    private previous = { x: 0, y: 0 }\r\n    protected generateDataPoint() {\r\n        const point = {\r\n            x: this.previous.x + ( Math.random() - 0.5 ) * 2,\r\n            y: this.previous.y + ( Math.random() - 0.5 ) * 2\r\n        }\r\n        this.previous = point\r\n        return point\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x + data[data.length - 1].x, y: dataToReset.y + data[data.length - 1].y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { OHLCData } from '../dataHost'\r\n\r\n/**\r\n * Options for the OHLC data generator\r\n */\r\nexport interface OHLCGeneratorOptions {\r\n    /**\r\n     * How many points of data to generate.\r\n     */\r\n    numberOfPoints: number\r\n    /**\r\n     * Timestamp of the first data point.\r\n     */\r\n    startTimestamp: number,\r\n    /**\r\n     * How long time there is between two timestamps.\r\n     */\r\n    dataFreq: number,\r\n    /**\r\n     * What is the value the data generation should start at.\r\n     */\r\n    start: number,\r\n    /**\r\n     * How much the data can change.\r\n     */\r\n    volatility: number\r\n}\r\n\r\n/**\r\n * Create a new OHLC data generator with default values.\r\n * The generator creates random OHLC data.\r\n */\r\nexport function createOHLCGenerator() {\r\n    return new OHLCGenerator( {\r\n        numberOfPoints: 1000,\r\n        startTimestamp: 0,\r\n        dataFreq: 1,\r\n        start: 100,\r\n        volatility: 0.1\r\n    } )\r\n}\r\n\r\n/**\r\n * OHLC data generator.\r\n * Generates random OHLC data. The open value is derived from the previous close.\r\n *\r\n * To create a new instance of OHLC data generator use [[createOHLCGenerator]] factory.\r\n */\r\nclass OHLCGenerator extends DataGenerator<OHLCData, OHLCGeneratorOptions> {\r\n    constructor( args: OHLCGeneratorOptions ) {\r\n        super( args )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfPoints.\r\n     * @param numberOfPoints How many points of data to generate\r\n     */\r\n    setNumberOfPoints( numberOfPoints: number ) {\r\n        return new OHLCGenerator( { ...this.options, numberOfPoints } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new time stamp to start generating the data.\r\n     * @param startTimestamp The timestamp for the first data point.\r\n     */\r\n    setStartTimestamp( startTimestamp: number ) {\r\n        return new OHLCGenerator( { ...this.options, startTimestamp } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new data frequency.\r\n     * @param dataFreq How long the time between two timestamps is.\r\n     */\r\n    setDataFrequency( dataFreq: number ) {\r\n        return new OHLCGenerator( { ...this.options, dataFreq } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new starting value.\r\n     * @param start What is the value the data generation should start from.\r\n     */\r\n    setStart( start: number ) {\r\n        return new OHLCGenerator( { ...this.options, start } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new volatility.\r\n     * @param volatility How volatile the data is. How much the data changes between data points.\r\n     *                   For example volatility of 0.2 would allow maximum of 0.2 change up or down between datapoints.\r\n     */\r\n    setVolatility( volatility: number ) {\r\n        return new OHLCGenerator( { ...this.options, volatility } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfPoints\r\n    }\r\n\r\n    private prevPoint = [this.options.startTimestamp, this.options.start, this.options.start, this.options.start, this.options.start]\r\n    protected generateDataPoint( i: number ) {\r\n        let dataPoint: OHLCData = [0, 0, 0, 0, 0]\r\n        const timeStamp = ( this.options.startTimestamp + this.options.dataFreq * i )\r\n\r\n        const dir = Math.random() > 0.5 ? 1 : -1\r\n        let newPoints = Array.from( Array( 4 ) ).map( v => {\r\n            let change = Math.random() * this.options.volatility * dir\r\n            if ( this.prevPoint[4] + change < 0 ) {\r\n                change = change * -1\r\n            }\r\n            // All new points are derived from the last points closing value.\r\n            return this.prevPoint[4] + change\r\n        } ).sort( ( a, b ) => a - b )\r\n\r\n        if ( dir === -1 ) {\r\n            newPoints = [newPoints[0], newPoints[2], newPoints[1], newPoints[3]]\r\n        }\r\n        dataPoint = [timeStamp, newPoints[1], newPoints[3], newPoints[0], newPoints[2]]\r\n        this.prevPoint = dataPoint\r\n        return dataPoint\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: OHLCData, data: OHLCData[] ): OHLCData {\r\n        // base + end-base + point1-point0\r\n        const newPoint = <OHLCData>[\r\n            dataToReset[0] + data.length * ( data[data.length - 1][0] - data[data.length - 2][0] ),\r\n            dataToReset[1],\r\n            dataToReset[2],\r\n            dataToReset[3],\r\n            dataToReset[4]\r\n        ]\r\n        return newPoint\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\n/**\r\n * Options for the Delta function generator.\r\n */\r\nexport interface DeltaFunctionOptions {\r\n    /**\r\n     * How many points of data to generate.\r\n     */\r\n    numberOfPoints: number\r\n    /**\r\n     * How many points there has to be between spikes.\r\n     */\r\n    minGap: number,\r\n    /**\r\n     * How many points there can be between spikes.\r\n     */\r\n    maxGap: number,\r\n    /**\r\n     * The minium spike height.\r\n     */\r\n    minAmplitude: number,\r\n    /**\r\n     * The maximum spike height.\r\n     */\r\n    maxAmplitude: number,\r\n    /**\r\n     * The probability of a spike to generate on each step.\r\n     */\r\n    probability: number\r\n}\r\n\r\n/**\r\n * Create a new Delta function generator with default values.\r\n * The generator creates flat progressive data with random spikes.\r\n */\r\nexport function createDeltaFunctionGenerator() {\r\n    return new DeltaFunctionGenerator( {\r\n        numberOfPoints: 1000,\r\n        minGap: 1,\r\n        maxGap: -1,\r\n        minAmplitude: 0.1,\r\n        maxAmplitude: 1,\r\n        probability: 0.02\r\n    } )\r\n}\r\n\r\n/**\r\n * A Delta function generator.\r\n * Generates random spikes in otherwise flat data. Generated data is between 0 and 1.\r\n *\r\n * To create a new instance of Delta function generator use [[createDeltaFunctionGenerator]] factory.\r\n */\r\nclass DeltaFunctionGenerator extends DataGenerator<Point, DeltaFunctionOptions> {\r\n    constructor( args: DeltaFunctionOptions ) {\r\n        super( args )\r\n\r\n        // Setup defaults and make sure args are valid\r\n        const opts = {\r\n            numberOfPoints: args.numberOfPoints,\r\n            minGap: args.minGap,\r\n            maxGap: args.maxGap,\r\n            minAmplitude: args.minAmplitude,\r\n            maxAmplitude: args.maxAmplitude,\r\n            probability: args.probability\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfPoints.\r\n     * @param numberOfPoints How many points of data to generate.\r\n     */\r\n    setNumberOfPoints( numberOfPoints: number ) {\r\n        return new DeltaFunctionGenerator( { ...this.options, numberOfPoints } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new minGap.\r\n     * @param minGap How many points there has to be between spikes.\r\n     */\r\n    setMinGap( minGap: number ) {\r\n        return new DeltaFunctionGenerator( { ...this.options, minGap } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new maxGap.\r\n     * @param maxGap How many points there can be between spikes.\r\n     */\r\n    setMaxGap( maxGap: number ) {\r\n        return new DeltaFunctionGenerator( { ...this.options, maxGap } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new minAmplitude.\r\n     * @param minAmplitude The minium spike height.\r\n     */\r\n    setMinAmplitude( minAmplitude: number ) {\r\n        return new DeltaFunctionGenerator( { ...this.options, minAmplitude } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new maxAmplitude.\r\n     * @param maxAmplitude The maximum spike height.\r\n     */\r\n    setMaxAmplitude( maxAmplitude: number ) {\r\n        return new DeltaFunctionGenerator( { ...this.options, maxAmplitude } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new probability.\r\n     * @param probability The probability of a spike to generate on each step.\r\n     */\r\n    setProbability( probability: number ) {\r\n        return new DeltaFunctionGenerator( { ...this.options, probability } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfPoints\r\n    }\r\n\r\n    private lastSpike = 0\r\n    protected generateDataPoint( i: number ) {\r\n        const sinceLast = i - this.lastSpike\r\n        const value = { x: i, y: 0 }\r\n        if ( sinceLast > this.options.minGap || this.options.minGap === -1 ) {\r\n            if ( sinceLast < this.options.maxGap || this.options.maxGap === -1 ) {\r\n                // Create random spike randomly.\r\n                const doSpike = Math.random() > ( 1 - this.options.probability )\r\n                if ( doSpike ) {\r\n                    value.y = Math.random() * ( this.options.maxAmplitude - this.options.minAmplitude ) + this.options.minAmplitude\r\n                    this.lastSpike = i\r\n                }\r\n            } else if ( sinceLast >= this.options.maxGap ) {\r\n                // Always create a spike if we are above the max gap.\r\n                value.y = Math.random() * ( this.options.maxAmplitude - this.options.minAmplitude ) + this.options.minAmplitude\r\n                this.lastSpike = i\r\n            }\r\n        }\r\n        return value\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x + data.length, y: dataToReset.y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\n/**\r\n * Options for White noise generator.\r\n */\r\nexport interface WhiteNoiseGeneratorOptions {\r\n    /**\r\n     * How many points of data to generate.\r\n     */\r\n    numberOfPoints: number\r\n}\r\n\r\n/**\r\n * Create a new White noise generator with default values.\r\n * The generator creates white noise between -1 and 1.\r\n */\r\nexport function createWhiteNoiseGenerator() {\r\n    return new WhiteNoiseGenerator( {\r\n        numberOfPoints: 1000\r\n    } )\r\n}\r\n\r\n/**\r\n * A white noise data generator.\r\n * Generates white noise.\r\n *\r\n * To create a new instance of white noise data generator use [[createWhiteNoiseGenerator]] factory.\r\n */\r\nclass WhiteNoiseGenerator extends DataGenerator<Point, WhiteNoiseGeneratorOptions> {\r\n    constructor( args: WhiteNoiseGeneratorOptions ) {\r\n        super( args )\r\n        const opts = {\r\n            numberOfPoints: args.numberOfPoints\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfPoints.\r\n     * @param numberOfPoints How many points of data to generate\r\n     */\r\n    setNumberOfPoints( numberOfPoints: number ) {\r\n        return new WhiteNoiseGenerator( this.options ? { ...this.options, numberOfPoints } : { numberOfPoints } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfPoints\r\n    }\r\n\r\n    protected generateDataPoint( i: number ) {\r\n        const point = {\r\n            x: i,\r\n            y: ( Math.random() - 0.5 ) * 2\r\n        }\r\n        return point\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x + data[data.length - 1].x, y: dataToReset.y + data[data.length - 1].y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\n\r\n/**\r\n * Options for Sampled data generator.\r\n */\r\ninterface SampledDataGeneratorOptions<T> {\r\n    /**\r\n     * The input data to sample as per the sampling frequency.\r\n     */\r\n    inputData: T[],\r\n    /**\r\n     * How often to sample the data. (Hz)\r\n     */\r\n    samplingFrequency: number,\r\n    /**\r\n     * A constant step between sampling\r\n     */\r\n    step: number\r\n}\r\n\r\n/**\r\n * Structure for the sampled point.\r\n * @param T Data type for the data that the generator samples.\r\n */\r\nexport interface SampledPoint<T> {\r\n    /**\r\n     * The timestamp for this data point.\r\n     */\r\n    timestamp: number,\r\n    /**\r\n     * The value from the input array that has been sampled.\r\n     */\r\n    data: T\r\n}\r\n\r\n/**\r\n * Create a new Sampled data generator with default values.\r\n * The generator samples the given input data array at specific frequency.\r\n * @param T Data type for the data that the generator samples.\r\n */\r\nexport function createSampledDataGenerator<T>() {\r\n    return new SampledDataGenerator<T>( {\r\n        inputData: [],\r\n        samplingFrequency: 50,\r\n        step: 0\r\n    } )\r\n}\r\n\r\n/**\r\n * A sampled data generator.\r\n * Samples given data with specific frequency.\r\n * @param T Data type for the data that the generator samples.\r\n *\r\n * To create a new instance of sampled data generator use [[createSampledDataGenerator]] factory.\r\n */\r\nclass SampledDataGenerator<T> extends DataGenerator<SampledPoint<T>, SampledDataGeneratorOptions<T>> {\r\n    private interval = 1 / ( this.options.samplingFrequency || 10 )\r\n    constructor( args: SampledDataGeneratorOptions<T> ) {\r\n        super( args )\r\n        const opts = {\r\n            inputData: args.inputData,\r\n            samplingFrequency: args.samplingFrequency,\r\n            step: args.step\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with new the new array of data as sampling target.\r\n     * @param inputData Array of data to sample.\r\n     */\r\n    setInputData( inputData: T[] ) {\r\n        return new SampledDataGenerator( { ...this.options, inputData } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new sampling frequency.\r\n     * @param samplingFrequency Set the frequency that the data is sampled from the input array.\r\n     */\r\n    setSamplingFrequency( samplingFrequency: number ) {\r\n        return new SampledDataGenerator( { ...this.options, samplingFrequency } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new step.\r\n     * @param step A constant step between samplings.\r\n     */\r\n    setStep( step: number ) {\r\n        return new SampledDataGenerator( { ...this.options, step } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.inputData.length\r\n    }\r\n\r\n    protected generateDataPoint( i: number ) {\r\n        const point: SampledPoint<T> = {\r\n            timestamp: i * this.interval + i * this.options.step,\r\n            data: this.options.inputData[i]\r\n        }\r\n        return point\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: SampledPoint<T>, data: SampledPoint<T>[] ): SampledPoint<T> {\r\n        return { timestamp: dataToReset.timestamp + data[data.length - 1].timestamp, data: dataToReset.data }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\nimport { Point } from '../dataHost'\r\n\r\nexport type ParametricFunction = ( t: number ) => number\r\n\r\n/**\r\n * Options for Parametric Function generator.\r\n */\r\nexport interface ParametricFunctionOptions {\r\n    /**\r\n     * Function for X-value\r\n     */\r\n    xFunction: ParametricFunction,\r\n    /**\r\n     * Function for Y-value\r\n     */\r\n    yFunction: ParametricFunction,\r\n    /**\r\n     * Start t-value.\r\n     */\r\n    start: number,\r\n    /**\r\n     * End t-value.\r\n     */\r\n    end: number,\r\n    /**\r\n     * Step of `t` between each sample\r\n     */\r\n    step: number\r\n}\r\n/**\r\n * Create a new Parametric Function generator with default values.\r\n * The generator samples a given X and Y functions for each `t` step in the start - end range.\r\n */\r\nexport function createParametricFunctionGenerator() {\r\n    return new ParametricFunctionGenerator( {\r\n        xFunction: ( t ) => 3 * Math.cos( 3 * t ),\r\n        yFunction: ( t ) => 3 * Math.sin( 4 * t ),\r\n        start: 0,\r\n        end: 1000,\r\n        step: 0.5\r\n    } )\r\n}\r\n/**\r\n * A Parametric function data generator.\r\n * Generates point data by sampling X and Y functions with for each step `t`.\r\n *\r\n * To create a new instance of Parametric function data generator use [[createParametricFunctionGenerator]] factory.\r\n */\r\nclass ParametricFunctionGenerator extends DataGenerator<Point, ParametricFunctionOptions> {\r\n    private t = this.options.start\r\n    /**\r\n     * Number of points that generator is able to generate.\r\n     * Computed from start, end and step values.\r\n     */\r\n    private readonly numberOfPoints: number\r\n\r\n    constructor( args: ParametricFunctionOptions ) {\r\n        super( args )\r\n\r\n        const opts = {\r\n            xFunction: args.xFunction,\r\n            yFunction: args.yFunction,\r\n            start: args.start,\r\n            end: args.end,\r\n            step: args.step\r\n        }\r\n        this.options = Object.freeze( opts )\r\n        this.numberOfPoints = Math.ceil( Math.abs( opts.end - opts.start ) / opts.step )\r\n    }\r\n    /**\r\n     * Returns a new Parametric function generator with the new X-value sampling function.\r\n     * @param handler A function that is sampled to generate the data.\r\n     */\r\n    setXFunction( handler: ParametricFunction ) {\r\n        return new ParametricFunctionGenerator( { ...this.options, xFunction: handler } )\r\n    }\r\n    /**\r\n     * Returns a new Parametric function generator with the new Y-value sampling function.\r\n     * @param handler A function that is sampled to generate the data.\r\n     */\r\n    setYFunction( handler: ParametricFunction ) {\r\n        return new ParametricFunctionGenerator( { ...this.options, yFunction: handler } )\r\n    }\r\n    /**\r\n     * Returns a new Parametric function generator with the new start t-value.\r\n     * @param   start   Start t-value\r\n     */\r\n    setStart( start: number ) {\r\n        return new ParametricFunctionGenerator( { ...this.options, start } )\r\n    }\r\n    /**\r\n     * Returns a new Parametric function generator with the new end t-value.\r\n     * @param   end   End t-value\r\n     */\r\n    setEnd( end: number ) {\r\n        return new ParametricFunctionGenerator( { ...this.options, end } )\r\n    }\r\n    /**\r\n     * Returns a new Parametric function generator with the new t-step.\r\n     * @param   step   t-step between each sample.\r\n     */\r\n    setStep( step: number ) {\r\n        return new ParametricFunctionGenerator( { ...this.options, step } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.numberOfPoints\r\n    }\r\n\r\n    protected generateDataPoint() {\r\n        const point = {\r\n            x: this.options.xFunction( this.t ),\r\n            y: this.options.yFunction( this.t )\r\n        }\r\n        this.t = this.t + this.options.step\r\n        return point\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: Point, data: Point[] ): Point {\r\n        return { x: dataToReset.x, y: dataToReset.y }\r\n    }\r\n}\r\n","import { DataGenerator } from '../dataGenerator'\r\n\r\n/**\r\n * Options for the Spectrum data generator.\r\n */\r\nexport interface SpectrumDataOptions {\r\n\r\n    /**\r\n     * How many samples to generate.\r\n     */\r\n    numberOfSamples: number\r\n\r\n    /**\r\n     * How many values are in a single spectrum sample.\r\n     */\r\n    sampleSize: number\r\n\r\n    /**\r\n     * Variation between adjacent points in range 0...100.\r\n     */\r\n    variation: number\r\n\r\n    /**\r\n     * Frequency drifting also depends on Variation, which effects especially in low Frequency Stability amounts.\r\n     */\r\n    frequencyStability: number\r\n\r\n    /**\r\n     * Factor that alters the narrowness of first spectrum channel.\r\n     */\r\n    narrowFactor1: number\r\n\r\n    /**\r\n     * Factor that alters the narrowness of second spectrum channel.\r\n     */\r\n    narrowFactor2: number\r\n}\r\n\r\nconst defaultOptions: SpectrumDataOptions = {\r\n    numberOfSamples: 1000,\r\n    sampleSize: 10,\r\n    variation: 10.0,\r\n    frequencyStability: 1.0,\r\n    narrowFactor1: 8.0,\r\n    narrowFactor2: 24.0\r\n}\r\n\r\n/**\r\n * Create a new Spectrum Data Generator with default values.\r\n */\r\nexport function createSpectrumDataGenerator() {\r\n    return new SpectrumDataGenerator( defaultOptions )\r\n}\r\n\r\n/**\r\n * Spectrum data generator.\r\n * Generates rows of random numbers that can be used to mimic spectrum data.\r\n * Generated data is between 0 and 1.\r\n *\r\n * To create a new instance of Spectrum data generator use [[createSpectrumDataGenerator]] factory.\r\n */\r\nclass SpectrumDataGenerator extends DataGenerator<number[], SpectrumDataOptions> {\r\n    constructor( args: SpectrumDataOptions ) {\r\n        super( args )\r\n\r\n        // Setup defaults and make sure args are valid\r\n        const opts: SpectrumDataOptions = {\r\n            sampleSize: args.sampleSize !== undefined ? args.sampleSize : defaultOptions.sampleSize,\r\n            numberOfSamples: args.numberOfSamples !== undefined ? args.numberOfSamples : defaultOptions.numberOfSamples,\r\n            variation: args.variation !== undefined ? args.variation : defaultOptions.variation,\r\n            frequencyStability: args.frequencyStability !== undefined ? args.frequencyStability : defaultOptions.frequencyStability,\r\n            narrowFactor1: args.narrowFactor1 !== undefined ? args.narrowFactor1 : defaultOptions.narrowFactor1,\r\n            narrowFactor2: args.narrowFactor2 !== undefined ? args.narrowFactor2 : defaultOptions.narrowFactor2\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new numberOfSamples.\r\n     * @param numberOfSamples How many samples to generate\r\n     */\r\n    setNumberOfSamples( numberOfSamples: number ) {\r\n        return new SpectrumDataGenerator( { ...this.options, numberOfSamples } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new sampleSize.\r\n     * @param sampleSize How many values are in a single spectrum sample.\r\n     */\r\n    setSampleSize( sampleSize: number ) {\r\n        return new SpectrumDataGenerator( { ...this.options, sampleSize } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new variation.\r\n     * @param variation Variation between adjacent points in range 0...100.\r\n     */\r\n    setVariation( variation: number ) {\r\n        return new SpectrumDataGenerator( { ...this.options, variation } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new frequencyStability.\r\n     * @param frequencyStability    Frequency drifting also depends on Variation,\r\n     *                              which effects especially in low Frequency Stability amounts.\r\n     */\r\n    setFrequencyStability( frequencyStability: number ) {\r\n        return new SpectrumDataGenerator( { ...this.options, frequencyStability } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new narrowFactor1.\r\n     * @param narrowFactor1 Factor that alters the narrowness of first spectrum channel.\r\n     */\r\n    setNarrowFactor1( narrowFactor1: number ) {\r\n        return new SpectrumDataGenerator( { ...this.options, narrowFactor1 } )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new narrowFactor2.\r\n     * @param narrowFactor2 Factor that alters the narrowness of second spectrum channel.\r\n     */\r\n    setNarrowFactor2( narrowFactor2: number ) {\r\n        return new SpectrumDataGenerator( { ...this.options, narrowFactor2 } )\r\n    }\r\n\r\n    /**\r\n     * Returns how many points of data the generator should generate.\r\n     */\r\n    protected getPointCount() {\r\n        return this.options.numberOfSamples\r\n    }\r\n\r\n    /**\r\n     * Generate a new row of Spectrum data.\r\n     * @param iPoint Index of point.\r\n     */\r\n    protected generateDataPoint( iPoint: number ) {\r\n        const m_dInitialValue = 10.0\r\n        // NOTE: Data is scaled to [0, 1] at the very end.\r\n        const m_dMax = 100\r\n        const m_dMin = 0\r\n        // [0, 100] Variation between adjacent points in range 0...100.\r\n        const m_dVariation = this.options.variation\r\n        const m_iRowLength = this.options.sampleSize\r\n        // [0, 100]  Frequency drifting also depends on Variation, which effects especially in low Frequency Stability amounts.\r\n        const m_dFrequencyStability = this.options.frequencyStability\r\n\r\n        let m_dPeak1X = m_iRowLength / 8.0\r\n        let m_dPeak2X = m_iRowLength / 2.0\r\n\r\n\r\n\r\n        const aNewData = new Array( m_iRowLength )\r\n\r\n        for ( let i = 0; i < m_iRowLength; i++ )\r\n            aNewData[i] = m_dInitialValue\r\n\r\n        //Calc new data\r\n        const dHalf = m_iRowLength / 2.0\r\n        m_dPeak1X += ( Math.random() - 0.5 ) * m_dVariation / m_dFrequencyStability / 100.0 * m_iRowLength / 2.0\r\n        m_dPeak2X += ( Math.random() - 0.5 ) * m_dVariation / m_dFrequencyStability / 100.0 * m_iRowLength\r\n        if ( m_dPeak1X < 0 )\r\n            m_dPeak1X = 0\r\n        if ( m_dPeak1X > m_iRowLength )\r\n            m_dPeak1X = m_iRowLength\r\n        if ( m_dPeak2X < 0 )\r\n            m_dPeak2X = 0\r\n        if ( m_dPeak2X > m_iRowLength )\r\n            m_dPeak2X = m_iRowLength\r\n\r\n\r\n        let dNewValue1\r\n        let dNewValue2\r\n        let dX1\r\n        let dX2\r\n        const dPeakY1 = m_dMax / 3.0 * 2.0\r\n        const dPeakY2 = m_dMax / 2.0\r\n        const dNarrowFactor1 = this.options.narrowFactor1\r\n        const dNarrowFactor2 = this.options.narrowFactor2\r\n\r\n        const dA1 = dPeakY1 / ( dHalf * dHalf ) * dNarrowFactor1\r\n        const dA2 = dPeakY2 / ( dHalf * dHalf ) * dNarrowFactor2\r\n        let dSum12\r\n        for ( let i = 0; i < m_iRowLength; i++ ) {\r\n            dX1 = 0.8 * i - m_dPeak1X\r\n            dX2 = 0.8 * i - m_dPeak2X\r\n            dNewValue1 = dPeakY1 - dX1 * dX1 * dA1\r\n            if ( dNewValue1 < m_dMin )\r\n                dNewValue1 = m_dMin\r\n            if ( dNewValue1 > m_dMax )\r\n                dNewValue1 = m_dMax\r\n\r\n            dNewValue2 = dPeakY2 - dX2 * dX2 * dA2\r\n            if ( dNewValue2 < m_dMin )\r\n                dNewValue2 = m_dMin\r\n            if ( dNewValue2 > m_dMax )\r\n                dNewValue2 = m_dMax\r\n\r\n            dSum12 = dNewValue1 + dNewValue2\r\n            dSum12 = dSum12 + dSum12 * ( Math.random() - 0.5 ) * m_dVariation / 10.0\r\n\r\n            aNewData[i] = ( aNewData[i] + dSum12 ) / 2.0\r\n            if ( aNewData[i] < m_dMin )\r\n                aNewData[i] = m_dMin\r\n            if ( aNewData[i] > m_dMax )\r\n                aNewData[i] = m_dMax\r\n\r\n            // Scale to [0, 1]\r\n            aNewData[i] = aNewData[i] * 0.02\r\n        }\r\n\r\n        return aNewData\r\n    }\r\n\r\n    protected infiniteReset( dataToReset: number[], data: number[][] ): number[] {\r\n        return dataToReset.slice()\r\n    }\r\n}\r\n","// Generator for heat map data (2 dimensional plane, XY, where each XY coordinate is associated with an intensity value).\r\n// Can be configured with arbitrary number of \"water drops\", which are like spots of more exposed area in the generated heat map data. \r\n\r\n/**\r\n * Water Drop data generator generation options.\r\n */\r\nexport interface WaterDropDataOptions {\r\n    /**\r\n     * Size of output array.\r\n     */\r\n    rows: number\r\n    /**\r\n     * Size of output arrays nested arrays.\r\n     */\r\n    columns: number\r\n    /**\r\n     * Row positions of water drops. Normalized, range = [0, 1]\r\n     */\r\n    rowPositionsNormalized: number[]\r\n    /**\r\n     * Column positions of water drops. Normalized, range = [0, 1]\r\n     */\r\n    columnPositionsNormalized: number[]\r\n    /**\r\n     * Amplitudes of water drops.\r\n     */\r\n    amplitudes: number[]\r\n    /**\r\n     * Offset level (mid-Y)\r\n     */\r\n    offsetLevel: number\r\n    /**\r\n     * Volatility, set larger number to generate more waves for each drop\r\n     */\r\n    volatility: number\r\n}\r\n\r\nconst defaultOptions: WaterDropDataOptions = {\r\n    rows: 10,\r\n    columns: 10,\r\n    rowPositionsNormalized: [0.2, 0.5, 0.7],\r\n    columnPositionsNormalized: [0.6, 0.5, 0.3],\r\n    amplitudes: [15, 50, 3],\r\n    offsetLevel: 47,\r\n    volatility: 25\r\n}\r\n\r\n/**\r\n * Type definition for data generated by WaterDropDataGenerator.\r\n *\r\n * Multidimensional number Array, where intensity value at given row & column can be accessed by:\r\n * ```ts\r\n * const intensity = WaterDropData[ row ][ column ]\r\n * ```\r\n */\r\nexport type WaterDropData = number[][]\r\n\r\n/**\r\n * Create a new WaterDropDataGenerator with default values.\r\n */\r\nexport function createWaterDropDataGenerator() {\r\n    return new WaterDropDataGenerator( defaultOptions )\r\n}\r\n\r\n/**\r\n * Water drop data generator.\r\n * Generates grid of data containing \"water drops\", which are like spots of more exposed area in the generated heat map data. \r\n * Generated data range depends on the [[WaterDropDataOptions]].\r\n *\r\n * To create a new instance of Water drop data generator use [[createWaterDropDataGenerator]] factory.\r\n */\r\nclass WaterDropDataGenerator {\r\n\r\n    readonly options: WaterDropDataOptions\r\n\r\n    constructor( args: WaterDropDataOptions ) {\r\n        // Setup defaults and make sure args are valid\r\n        const opts: WaterDropDataOptions = {\r\n            rows: args.rows !== undefined ? args.rows : defaultOptions.rows,\r\n            columns: args.columns !== undefined ? args.columns : defaultOptions.columns,\r\n            rowPositionsNormalized:\r\n                args.rowPositionsNormalized !== undefined ? args.rowPositionsNormalized : defaultOptions.rowPositionsNormalized,\r\n            columnPositionsNormalized:\r\n                args.columnPositionsNormalized !== undefined ? args.columnPositionsNormalized : defaultOptions.columnPositionsNormalized,\r\n            amplitudes: args.amplitudes !== undefined ? args.amplitudes : defaultOptions.amplitudes,\r\n            offsetLevel: args.offsetLevel !== undefined ? args.offsetLevel : defaultOptions.offsetLevel,\r\n            volatility: args.volatility !== undefined ? args.volatility : defaultOptions.volatility\r\n        }\r\n        this.options = Object.freeze( opts )\r\n    }\r\n\r\n    /**\r\n     * Returns a new Data generator with the new rows amount.\r\n     * @param rows  Rows amount\r\n     */\r\n    setRows( rows: number ) {\r\n        return new WaterDropDataGenerator( { ...this.options, rows } )\r\n    }\r\n    /**\r\n     * Returns a new Data generator with the new columns amount.\r\n     * @param columns  Columns amount\r\n     */\r\n    setColumns( columns: number ) {\r\n        return new WaterDropDataGenerator( { ...this.options, columns } )\r\n    }\r\n    /**\r\n     * Returns a new Data generator with the new rows amount.\r\n     * @param waterDrops    Water drops configuration.\r\n     *                      **Normalized parameters in range [0, 1]**\r\n     */\r\n    setWaterDrops( waterDrops: Array<{\r\n        rowNormalized: number,\r\n        columnNormalized: number,\r\n        amplitude: number\r\n    }> ) {\r\n        const rowPositionsNormalized = waterDrops.map( ( waterDrop ) => waterDrop.rowNormalized )\r\n        const columnPositionsNormalized = waterDrops.map( ( waterDrop ) => waterDrop.columnNormalized )\r\n        const amplitudes = waterDrops.map( ( waterDrop ) => waterDrop.amplitude )\r\n        return new WaterDropDataGenerator( { ...this.options, rowPositionsNormalized, columnPositionsNormalized, amplitudes } )\r\n    }\r\n    /**\r\n     * Returns a new Data generator with the new offsetLevel.\r\n     * @param offsetLevel    Offset level (mid-Y)\r\n     */\r\n    setOffsetLevel( offsetLevel: number ) {\r\n        return new WaterDropDataGenerator( { ...this.options, offsetLevel } )\r\n    }\r\n    /**\r\n     * Returns a new Data generator with the new volatility.\r\n     * @param volatility  Volatility, set larger number to generate more waves for each drop\r\n     */\r\n    setVolatility( volatility: number ) {\r\n        return new WaterDropDataGenerator( { ...this.options, volatility } )\r\n    }\r\n\r\n    /**\r\n     * Generate WaterDropData asynchronously.\r\n     * \r\n     * > NOTE: WaterDropData doesn't support the use of a DataHost and as such doesn't provide method to stream the data.\r\n     * > Instead the data is all provided at the same time as a Promise.\r\n     */\r\n    generate(): Promise<WaterDropData> {\r\n        return new Promise( async ( resolve ) => {\r\n\r\n            const sizeX = this.options.rows\r\n            const sizeZ = this.options.columns\r\n            const xPositionsNormalized = this.options.rowPositionsNormalized\r\n            const zPositionsNormalized = this.options.columnPositionsNormalized\r\n            const amplitudes = this.options.amplitudes\r\n            const offsetLevel = this.options.offsetLevel\r\n            const volatility = this.options.volatility\r\n\r\n            /**\r\n             * Oscillator properties.\r\n             */\r\n            interface Oscillator {\r\n                centerX: number\r\n                centerZ: number\r\n                amplitude: number\r\n                offsetY: number\r\n                gain: number\r\n            }\r\n            /**\r\n             * Calculate waves at given point.\r\n             * @param x wave origin x-coordinate.\r\n             * @param z wave origin z-coordinate.\r\n             * @param oscillators Oscillators.\r\n             * @param volatility Volatility.\r\n             * @returns wave height at given point.\r\n             */\r\n            function CalculateWavesAtPoint(\r\n                x: number,\r\n                z: number\r\n            ) {\r\n                let resultValue = 0\r\n                const iOscillatorCount = oscillators.length\r\n                for ( let i = 0; i < iOscillatorCount; i++ ) {\r\n                    const oscillator = oscillators[i]\r\n                    const distX = x - oscillator.centerX\r\n                    const distZ = z - oscillator.centerZ\r\n                    const dist = Math.sqrt( distX * distX + distZ * distZ )\r\n                    resultValue += oscillator.gain * oscillator.amplitude * Math.cos( dist * volatility ) * Math.exp( -dist * 3.0 )\r\n                }\r\n                return resultValue\r\n            }\r\n\r\n            const iOscCount = amplitudes.length\r\n            const oscillators: Oscillator[] = Array<Oscillator>( iOscCount )\r\n\r\n            for ( let iOsc = 0; iOsc < iOscCount; iOsc++ ) {\r\n                oscillators[iOsc] = {\r\n                    amplitude: amplitudes[iOsc],\r\n                    centerX: xPositionsNormalized[iOsc],\r\n                    centerZ: zPositionsNormalized[iOsc],\r\n                    gain: 1,\r\n                    offsetY: 0\r\n                }\r\n            }\r\n\r\n            const result = Array.from( Array( sizeX ) ).map( () => Array<number>( sizeZ ) )\r\n            const dTotalX = 1\r\n            const dTotalZ = 1\r\n            const stepX = ( dTotalX / sizeX )\r\n            const stepZ = ( dTotalZ / sizeZ )\r\n\r\n            let lastTimeout = Date.now()\r\n            let iDataPoint = 0\r\n            for ( let row = 0, z = 0; row < sizeZ; row++, z += stepZ ) {\r\n                for ( let col = 0, x = 0; col < sizeX; col++, x += stepX ) {\r\n                    result[col][row] = CalculateWavesAtPoint( x, z ) + offsetLevel\r\n                    iDataPoint++\r\n                    if ( iDataPoint > 0 && iDataPoint % 1000 === 0 ) {\r\n                        // Check if timeout should be triggered.\r\n                        if ( Date.now() - lastTimeout >= 15 ) {\r\n                            // Timeout.\r\n                            await new Promise( clbk => setTimeout( clbk, 0 ) )\r\n                            lastTimeout = Date.now()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            resolve( result )\r\n\r\n        } )\r\n    }\r\n\r\n}\r\n"],"names":["defaultOptions"],"mappings":"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"}