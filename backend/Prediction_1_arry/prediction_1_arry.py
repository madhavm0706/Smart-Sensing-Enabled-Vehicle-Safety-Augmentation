# -*- coding: utf-8 -*-
"""prediction_1_arry.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkBle1JLh0no95xZPHjYOTPaVMsgALRP
"""

#importing libraries
import numpy as np 
import pandas as pd 
import os
import pickle
import csv
import pywt
from scipy import stats
import random

#denoise function

def denoise(data): 
    wave = pywt.Wavelet('sym4')
    maxlevel = pywt.dwt_max_level(len(data), wave.dec_len)
    t = 0.04 # Threshold for filtering

    coefficient = pywt.wavedec(data, 'sym4', level=maxlevel)
    for i in range(1, len(coefficient)):
        coefficient[i] = pywt.threshold(coefficient[i], t*max(coefficient[i]))
        
    datarecord = pywt.waverec(coefficient, 'sym4')
    
    return datarecord

#Collect data
path = '/content/dataset/' 
w_size = 180  #window size
max_count = 10000
X = list()

# Read files
filename = next(os.walk(path))[2]

# Split and save .csv , .txt 
record = list()
annotation = list()

# segrefating filenames and annotations
for f in filename:
    f_name, file_extension = os.path.splitext(f)
    if(file_extension == '.csv'): # *.csv
        record.append(path + f_name + file_extension)
    else: # *.txt
        annotation.append(path + f_name + file_extension)

# Records
for r in range(0,len(record)):
    signals = []
    with open(record[r], 'rt') as csvfile:
        spam_reader = csv.reader(csvfile, delimiter=',', quotechar='|') # read CSV file\
        row_index = -1
        for row in spam_reader:
            if(row_index >= 0):
                signals.insert(row_index, int(row[1]))
            row_index += 1        
    signals = denoise(signals)        
    signals = stats.zscore(signals)
    # Read anotations: R position and Arrhythmia class
    with open(annotation[r], 'r') as fileID:
        data = fileID.readlines() 
        beat = list()
        for d in range(1, len(data)): # 0 index is Chart Head
            splitted = data[d].split(' ')
            splitted = filter(None, splitted)
            next(splitted) # Time... Clipping
            pos = int(next(splitted)) # Sample ID
            if(w_size <= pos and pos < (len(signals) - w_size)):
              beat = signals[pos-w_size:pos+w_size]     ## REPLACE WITH R-PEAK DETECTION
              X.append(beat)
# data shape
# print(np.shape(X))

test_x = pd.DataFrame(X)
test = test_x.iloc[:,:test_x.shape[1]].values
test = test.reshape(len(test), test.shape[1],1)
# print(np.shape(test))

i=random.randint(0,2065)
pickled_model = pickle.load(open('model_1_arry.pkl', 'rb'))
pred=pickled_model.predict(test[[i]])
# print(pred)
arrythemia_class = np.argmax(pred[0])

# return arrythemia_class